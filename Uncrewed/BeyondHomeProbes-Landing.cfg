CONTRACT_TYPE
{
    name = ExplorationPlus-Landing
    title = Land on @/targetBody1
	genericTitle = Land on a Celestial Body
    group = ExplorationPlus
	description = Here at KSC we like to think we are always open to exploring new frontiers. With this in mind, we want you to head out to @/targetBody1 and see what we can see.
    genericDescription = Land on a celestial body, to see what we can see.
    synopsis = Continue exploring @/targetBody1
    completedMessage = Huzzah! There is no such thing as the final frontier.
    minExpiry = 1
    maxExpiry = 7
    deadline = 0
    cancellable = true
    declinable = true
    prestige = Exceptional
    targetBody = @/targetBody1
    maxSimultaneous = 1
    rewardScience = 10
    rewardReputation = 5.0
    rewardFunds = 96000.0
    failureReputation = 0.0
    failureFunds = 0.0
    advanceFunds = 0.0
    DATA
    {
        type = CelestialBody
		uniquenessCheck = CONTRACT_ACTIVE
        targetBody1 = OrbitedBodies().Where(b => !b.HaveLandedOn() && b.HasSurface()).SelectUnique()
		title = Must have orbited a celestial body, but not landed on it.
    }
	
	DATA_EXPAND
	{
		type = CelestialBody
		nextBody = [ Armstrong, Lua, Ash, Hydron, Hydrus, Scindo, Scaythe, Eidos, Ansia, Jade, Proxim, Kohm, Gateway, Anger, Voss, Vasto, Rock, Fury]
	}

	PARAMETER
	{
		name = LandDefine
		type = VesselParameterGroup
		define = Land
		hideVesselName = true	
		dissassociateVesselsOnContractCompletion = true
		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			situation = SPLASHED
			disableOnStateChange = false
			title = Land on @/targetBody1
		}
	}
	
		PARAMETER
	{
		name = LandCatch
		type = VesselParameterGroup
		vessel = Land
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			optional = true
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = (@ExplorationPlus:returnHome == 2)
		}
	}
	
    REQUIREMENT
    {
        name = Landed
        type = Landing
		targetBody = @/targetBody1
		invertRequirement = true
		title = Must not have landed on the target body.
    }
	
	REQUIREMENT
	{
		name = SplashDown
		type = SplashDown
		targetBody = @/targetBody1
		invertRequirement = true
		title = Must not have splashed down on the target body.
	}